program: THEN
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU THEN
##
## Ends in an error in state: 1.
##
## seq -> TAU . DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## TAU
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT THEN
##
## Ends in an error in state: 2.
##
## seq -> TAU DOT . internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## TAU DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: QOP_H THEN
##
## Ends in an error in state: 3.
##
## seq -> QOP_H . LPAREN nonempty_access_list RPAREN DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## QOP_H
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: QOP_H LPAREN THEN
##
## Ends in an error in state: 4.
##
## seq -> QOP_H LPAREN . nonempty_access_list RPAREN DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## QOP_H LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: QOP_H LPAREN ID GT
##
## Ends in an error in state: 8.
##
## seq -> QOP_H LPAREN nonempty_access_list . RPAREN DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## QOP_H LPAREN nonempty_access_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production separated_nonempty_list(COMMA,access) -> access
## In state 7, spurious reduction of production nonempty_access_list -> separated_nonempty_list(COMMA,access)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: QOP_H LPAREN ID RPAREN THEN
##
## Ends in an error in state: 9.
##
## seq -> QOP_H LPAREN nonempty_access_list RPAREN . DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## QOP_H LPAREN nonempty_access_list RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: QOP_H LPAREN ID RPAREN DOT THEN
##
## Ends in an error in state: 10.
##
## seq -> QOP_H LPAREN nonempty_access_list RPAREN DOT . internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## QOP_H LPAREN nonempty_access_list RPAREN DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: QMARK THEN
##
## Ends in an error in state: 11.
##
## seq -> QMARK . chan ID DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## QMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: QMARK ID THEN
##
## Ends in an error in state: 13.
##
## seq -> QMARK chan . ID DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## QMARK chan
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: QMARK ID ID THEN
##
## Ends in an error in state: 14.
##
## seq -> QMARK chan ID . DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## QMARK chan ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: QMARK ID ID DOT THEN
##
## Ends in an error in state: 15.
##
## seq -> QMARK chan ID DOT . internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## QMARK chan ID DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: MEASURE THEN
##
## Ends in an error in state: 16.
##
## seq -> MEASURE . LPAREN nonempty_access_list GT ID RPAREN DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## MEASURE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: MEASURE LPAREN THEN
##
## Ends in an error in state: 17.
##
## seq -> MEASURE LPAREN . nonempty_access_list GT ID RPAREN DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## MEASURE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: MEASURE LPAREN ID RPAREN
##
## Ends in an error in state: 18.
##
## seq -> MEASURE LPAREN nonempty_access_list . GT ID RPAREN DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## MEASURE LPAREN nonempty_access_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production separated_nonempty_list(COMMA,access) -> access
## In state 7, spurious reduction of production nonempty_access_list -> separated_nonempty_list(COMMA,access)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: MEASURE LPAREN ID GT THEN
##
## Ends in an error in state: 19.
##
## seq -> MEASURE LPAREN nonempty_access_list GT . ID RPAREN DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## MEASURE LPAREN nonempty_access_list GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: MEASURE LPAREN ID GT ID THEN
##
## Ends in an error in state: 20.
##
## seq -> MEASURE LPAREN nonempty_access_list GT ID . RPAREN DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## MEASURE LPAREN nonempty_access_list GT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: MEASURE LPAREN ID GT ID RPAREN THEN
##
## Ends in an error in state: 21.
##
## seq -> MEASURE LPAREN nonempty_access_list GT ID RPAREN . DOT internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## MEASURE LPAREN nonempty_access_list GT ID RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: MEASURE LPAREN ID GT ID RPAREN DOT THEN
##
## Ends in an error in state: 22.
##
## seq -> MEASURE LPAREN nonempty_access_list GT ID RPAREN DOT . internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## MEASURE LPAREN nonempty_access_list GT ID RPAREN DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN THEN
##
## Ends in an error in state: 23.
##
## internal_choice -> LPAREN . seq PLUS separated_nonempty_list(PLUS,seq) RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
## internal_par -> LPAREN . internal_choice PAR separated_nonempty_list(PAR,internal_choice) RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN LPAREN THEN
##
## Ends in an error in state: 24.
##
## internal_choice -> LPAREN . seq PLUS separated_nonempty_list(PLUS,seq) RPAREN [ RPAREN PAR ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DISCARD THEN
##
## Ends in an error in state: 25.
##
## seq -> DISCARD . LPAREN access_list RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## DISCARD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DISCARD LPAREN THEN
##
## Ends in an error in state: 26.
##
## seq -> DISCARD LPAREN . access_list RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## DISCARD LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DISCARD LPAREN ID GT
##
## Ends in an error in state: 29.
##
## seq -> DISCARD LPAREN access_list . RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## DISCARD LPAREN access_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 31, spurious reduction of production separated_nonempty_list(COMMA,access) -> access
## In state 27, spurious reduction of production loption(separated_nonempty_list(COMMA,access)) -> separated_nonempty_list(COMMA,access)
## In state 28, spurious reduction of production access_list -> loption(separated_nonempty_list(COMMA,access))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DISCARD LPAREN ID THEN
##
## Ends in an error in state: 31.
##
## separated_nonempty_list(COMMA,access) -> access . [ RPAREN GT ]
## separated_nonempty_list(COMMA,access) -> access . COMMA separated_nonempty_list(COMMA,access) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## access
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DISCARD LPAREN ID COMMA THEN
##
## Ends in an error in state: 32.
##
## separated_nonempty_list(COMMA,access) -> access COMMA . separated_nonempty_list(COMMA,access) [ RPAREN GT ]
##
## The known suffix of the stack is as follows:
## access COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN LPAREN DISCARD LPAREN RPAREN THEN
##
## Ends in an error in state: 34.
##
## internal_choice -> LPAREN seq . PLUS separated_nonempty_list(PLUS,seq) RPAREN [ RPAREN PAR ]
##
## The known suffix of the stack is as follows:
## LPAREN seq
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN ID BANG ID PLUS THEN
##
## Ends in an error in state: 35.
##
## internal_choice -> LPAREN seq PLUS . separated_nonempty_list(PLUS,seq) RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## LPAREN seq PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DISCARD LPAREN RPAREN THEN
##
## Ends in an error in state: 36.
##
## separated_nonempty_list(PLUS,seq) -> seq . [ RPAREN PAR LPAREN ]
## separated_nonempty_list(PLUS,seq) -> seq . PLUS separated_nonempty_list(PLUS,seq) [ RPAREN PAR LPAREN ]
##
## The known suffix of the stack is as follows:
## seq
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID PLUS THEN
##
## Ends in an error in state: 37.
##
## separated_nonempty_list(PLUS,seq) -> seq PLUS . separated_nonempty_list(PLUS,seq) [ RPAREN PAR LPAREN ]
##
## The known suffix of the stack is as follows:
## seq PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID THEN
##
## Ends in an error in state: 39.
##
## seq -> chan . BANG expr [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## chan
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG THEN
##
## Ends in an error in state: 40.
##
## seq -> chan BANG . expr [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## chan BANG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG MINUS THEN
##
## Ends in an error in state: 41.
##
## expr -> MINUS . expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG LPAREN THEN
##
## Ends in an error in state: 42.
##
## expr -> LPAREN . expr RPAREN [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG LPAREN ID THEN
##
## Ends in an error in state: 45.
##
## expr -> expr . PLUS expr [ RPAREN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . AND expr [ RPAREN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . PAR expr [ RPAREN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . EQ expr [ RPAREN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . LT expr [ RPAREN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . GT expr [ RPAREN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . LEQ expr [ RPAREN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . GEQ expr [ RPAREN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> LPAREN expr . RPAREN [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG LPAREN ID PLUS THEN
##
## Ends in an error in state: 47.
##
## expr -> expr PLUS . expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG LPAREN ID PLUS ID TAU
##
## Ends in an error in state: 48.
##
## expr -> expr . PLUS expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr PLUS expr . [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . AND expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . PAR expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . EQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID PAR THEN
##
## Ends in an error in state: 49.
##
## expr -> expr PAR . expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr PAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID LT THEN
##
## Ends in an error in state: 52.
##
## expr -> expr LT . expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID LT ID TAU
##
## Ends in an error in state: 53.
##
## expr -> expr . PLUS expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . AND expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . PAR expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . EQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr LT expr . [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID LEQ THEN
##
## Ends in an error in state: 54.
##
## expr -> expr LEQ . expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr LEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID LEQ ID TAU
##
## Ends in an error in state: 55.
##
## expr -> expr . PLUS expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . AND expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . PAR expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . EQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr LEQ expr . [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr LEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID GT THEN
##
## Ends in an error in state: 56.
##
## expr -> expr GT . expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID GT ID TAU
##
## Ends in an error in state: 57.
##
## expr -> expr . PLUS expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . AND expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . PAR expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . EQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr GT expr . [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID GEQ THEN
##
## Ends in an error in state: 58.
##
## expr -> expr GEQ . expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr GEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID GEQ ID TAU
##
## Ends in an error in state: 59.
##
## expr -> expr . PLUS expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . AND expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . PAR expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . EQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr GEQ expr . [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr GEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID EQ THEN
##
## Ends in an error in state: 60.
##
## expr -> expr EQ . expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID EQ ID TAU
##
## Ends in an error in state: 61.
##
## expr -> expr . PLUS expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . AND expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . PAR expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . EQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr EQ expr . [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID AND THEN
##
## Ends in an error in state: 62.
##
## expr -> expr AND . expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID AND ID TAU
##
## Ends in an error in state: 63.
##
## expr -> expr . PLUS expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . AND expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr AND expr . [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . PAR expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . EQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG MINUS ID TAU
##
## Ends in an error in state: 64.
##
## expr -> expr . PLUS expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . AND expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . PAR expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . EQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GT expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GEQ expr [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> MINUS expr . [ THEN RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
##
## The known suffix of the stack is as follows:
## MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID THEN
##
## Ends in an error in state: 65.
##
## expr -> expr . PLUS expr [ RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . AND expr [ RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . PAR expr [ RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . EQ expr [ RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LT expr [ RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GT expr [ RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . LEQ expr [ RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## expr -> expr . GEQ expr [ RPAREN PLUS PAR LT LPAREN LEQ GT GEQ EQ ELSE AND ]
## seq -> chan BANG expr . [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## chan BANG expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN ID BANG ID PLUS ID BANG ID LPAREN
##
## Ends in an error in state: 66.
##
## internal_choice -> LPAREN seq PLUS separated_nonempty_list(PLUS,seq) . RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## LPAREN seq PLUS separated_nonempty_list(PLUS,seq)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 65, spurious reduction of production seq -> chan BANG expr
## In state 36, spurious reduction of production separated_nonempty_list(PLUS,seq) -> seq
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT IF THEN
##
## Ends in an error in state: 68.
##
## internal_choice -> IF . expr THEN internal_par ELSE internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT IF ID RPAREN
##
## Ends in an error in state: 69.
##
## expr -> expr . PLUS expr [ THEN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . AND expr [ THEN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . PAR expr [ THEN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . EQ expr [ THEN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . LT expr [ THEN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . GT expr [ THEN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . LEQ expr [ THEN PLUS PAR LT LEQ GT GEQ EQ AND ]
## expr -> expr . GEQ expr [ THEN PLUS PAR LT LEQ GT GEQ EQ AND ]
## internal_choice -> IF expr . THEN internal_par ELSE internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT IF ID THEN THEN
##
## Ends in an error in state: 70.
##
## internal_choice -> IF expr THEN . internal_par ELSE internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT IF ID THEN DISCARD LPAREN RPAREN THEN
##
## Ends in an error in state: 72.
##
## internal_choice -> IF expr THEN internal_par . ELSE internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## IF expr THEN internal_par
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT IF ID THEN ID BANG ID ELSE THEN
##
## Ends in an error in state: 73.
##
## internal_choice -> IF expr THEN internal_par ELSE . internal_par [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## IF expr THEN internal_par ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN DISCARD LPAREN RPAREN THEN
##
## Ends in an error in state: 76.
##
## internal_choice -> seq . [ PAR ]
## internal_choice -> LPAREN seq . PLUS separated_nonempty_list(PLUS,seq) RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## LPAREN seq
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN LPAREN ID BANG ID PLUS ID BANG ID RPAREN THEN
##
## Ends in an error in state: 77.
##
## internal_par -> LPAREN internal_choice . PAR separated_nonempty_list(PAR,internal_choice) RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## LPAREN internal_choice
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN DISCARD LPAREN RPAREN PAR THEN
##
## Ends in an error in state: 78.
##
## internal_par -> LPAREN internal_choice PAR . separated_nonempty_list(PAR,internal_choice) RPAREN [ RPAREN PLUS PAR LPAREN ELSE ]
##
## The known suffix of the stack is as follows:
## LPAREN internal_choice PAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN DISCARD LPAREN RPAREN PAR DISCARD LPAREN RPAREN THEN
##
## Ends in an error in state: 81.
##
## separated_nonempty_list(PAR,internal_choice) -> internal_choice . [ RPAREN ]
## separated_nonempty_list(PAR,internal_choice) -> internal_choice . PAR separated_nonempty_list(PAR,internal_choice) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## internal_choice
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TAU DOT LPAREN DISCARD LPAREN RPAREN PAR DISCARD LPAREN RPAREN PAR THEN
##
## Ends in an error in state: 82.
##
## separated_nonempty_list(PAR,internal_choice) -> internal_choice PAR . separated_nonempty_list(PAR,internal_choice) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## internal_choice PAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID LPAREN THEN
##
## Ends in an error in state: 92.
##
## restr -> LPAREN . RPAREN [ EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID LPAREN RPAREN THEN
##
## Ends in an error in state: 94.
##
## program -> external_par restr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## external_par restr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID BANG ID RPAREN
##
## Ends in an error in state: 96.
##
## separated_nonempty_list(PAR,external_choice) -> external_choice . [ LPAREN ]
## separated_nonempty_list(PAR,external_choice) -> external_choice . PAR separated_nonempty_list(PAR,external_choice) [ LPAREN ]
##
## The known suffix of the stack is as follows:
## external_choice
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 65, spurious reduction of production seq -> chan BANG expr
## In state 36, spurious reduction of production separated_nonempty_list(PLUS,seq) -> seq
## In state 88, spurious reduction of production external_choice -> separated_nonempty_list(PLUS,seq)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DISCARD LPAREN RPAREN PAR THEN
##
## Ends in an error in state: 97.
##
## separated_nonempty_list(PAR,external_choice) -> external_choice PAR . separated_nonempty_list(PAR,external_choice) [ LPAREN ]
##
## The known suffix of the stack is as follows:
## external_choice PAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

